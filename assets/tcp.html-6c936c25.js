import{_ as s,r as n,o as p,c as i,a as e,b as c,d as l,e as t}from"./app-e3fa08f8.js";const r={},d=t(`<h1 id="tcp-流量" tabindex="-1"><a class="header-anchor" href="#tcp-流量" aria-hidden="true">#</a> TCP 流量</h1><h2 id="录制-clien-hello" tabindex="-1"><a class="header-anchor" href="#录制-clien-hello" aria-hidden="true">#</a> 录制 Clien Hello</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo tcpdump tcp port 443 and host dean.airdb.dev -w dump.pcap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">sudo tcpdump </span><span style="color:#CE9178;">&quot;tcp port 443 and (tcp[((tcp[12] &amp; 0xf0) &gt;&gt;2)] = 0x16) &amp;&amp; (tcp[((tcp[12] &amp; 0xf0) &gt;&gt;2)+5] = 0x01)&quot;</span><span style="color:#D4D4D4;"> -w client-hello.pcap</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回放-client-hello" tabindex="-1"><a class="header-anchor" href="#回放-client-hello" aria-hidden="true">#</a> 回放 Client Hello</h2><p>tcpreplay是一系列工具的集合。包括（tcpprep、tcprewrite、tcpreplay和tcpbridge） 其中tcpreplay是真正实现流量回放功能的工具，其他几个工具可以看作tapreplay的辅助工具，作为流量重放前期的准备工作，比如 tcpprep可以划分哪些包是client的, 哪些是server的, 一会发包的时候client的包从一个网卡发, server的包可能从另一个网卡发。 tcprewrite可以就是修改2层, 3层, 4层报文头部，也就是可以将IP，MAC等信息修改为你期望的值。</p><p>官网： http://tcpreplay.appneta.com/</p><p>Quick started</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># 查看网卡信息</span></span>
<span class="line"><span style="color:#D4D4D4;">tcpreplay --listnics </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 重放</span></span>
<span class="line"><span style="color:#D4D4D4;">tcpreplay -i eth0 p.pcap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">#将 p.pcap 文件进行 tcpprep 操作，制作 cache 文件。</span></span>
<span class="line"><span style="color:#D4D4D4;">tcpprep -an client -i p.pcap -o p.cache –v</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tcpprep" tabindex="-1"><a class="header-anchor" href="#tcpprep" aria-hidden="true">#</a> tcpprep</h2><p>tcpprep：根据pcap文件，生成一个cache文件。将pacp数据包分解为客户端和服务器端。这个cache文件中保存着tcprewrite怎么修改报文，以及tcpreplay怎么发送报文的规则。也就是说，在你捕获的报文中有很多报文，这些报文可能有不同的源和目的（可能单播，可能广播），现在要确立一套规则，来规定你所捕获的报文，怎么个分发流程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># 根据源 IP</span></span>
<span class="line"><span style="color:#D4D4D4;">tcpprep -c 10.5.8.244/24 -i mysql.pcap -o mysql.cach</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 自动模式</span></span>
<span class="line"><span style="color:#D4D4D4;">tcpprep -a client -i mgcp.pcap -o mgcp.cach</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tcprewrite" tabindex="-1"><a class="header-anchor" href="#tcprewrite" aria-hidden="true">#</a> tcprewrite</h2><p>https://tcpreplay.appneta.com/wiki/tcprewrite</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">tcprewrite --option1=xxx --option2=xxx  -c input.cache -i input.pcap -o out.pcap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">tcprewrite --enet-smac=host_src_mac,client_src_mac \\</span></span>
<span class="line"><span style="color:#D4D4D4;">            --enet-dmac=host_dst_mac, client_dst_mac \\</span></span>
<span class="line"><span style="color:#D4D4D4;">            --endpoints=host_dst_ip:client_dst_ip \\</span></span>
<span class="line"><span style="color:#D4D4D4;">            --portmap=old_port1:new_port1 old_port2, new_port2 \\</span></span>
<span class="line"><span style="color:#D4D4D4;">            -i input.pcap -c input.cach -o out.pcap</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最少有两个参数" tabindex="-1"><a class="header-anchor" href="#最少有两个参数" aria-hidden="true">#</a> 最少有两个参数：</h3><p>--infile = input.pcap。原始数据包。 --outfile=output.pcap。修改之后的数据包。</p><h3 id="修改木洞主机mac和源mac" tabindex="-1"><a class="header-anchor" href="#修改木洞主机mac和源mac" aria-hidden="true">#</a> 修改木洞主机MAC和源MAC</h3><p>tcprewrite --enet-dmac=00:55:22:AF:C6:37 --enet-smac=00:44:66:FC:29:AF --infile=input.pcap --outfile=output.pcap</p><h3 id="_802-1q-vlan-tag信息的处理" tabindex="-1"><a class="header-anchor" href="#_802-1q-vlan-tag信息的处理" aria-hidden="true">#</a> 802.1Q VLAN tag信息的处理：</h3><p>删除：tcprewrite --enet-vlan=del --infile=input.pcap --outfile=otput.pcap 添加：tcprewrite --enet-vlan=add --enet-vlan-tag=40 --enet-vlan-cfi=1 --enetvlan-pri=4 --infile=input.pcap --outfile=output.pcap</p><h3 id="修改ip地址" tabindex="-1"><a class="header-anchor" href="#修改ip地址" aria-hidden="true">#</a> 修改IP地址：</h3><p>将10.0.0.0/8网段的IP替换为172.16.0.0/12，将192.168.0.0/16网段IP替换为172.168.0.0/12。 tcprewrite --pnat=10.0.0.0/8:172.16.0.0/12,192.168.0.0/16:172.168.0.0/12 --infile=input.pcap --outfile=output.pcap 随机生成源IP： tcprewrite --seed=423 --infile=input.pcap --outfile=output.pcap</p><p>修改端口号 tcprewrite --portmap=80:8080,22:8022 --infile=input.pcap --outfile=output.pcap tcpprep -p --pcap=vxlan_test1.pcap --cachefile=test1.cache</p><p>tcprewrite --cachefile=test1.cache --endpoints=&quot;192.168.252.18:192.168.252.17&quot; --infile=vxlan_test1.pcap --outfile=testvx1.pcap</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># 强制计算传输层校验和:</span></span>
<span class="line"><span style="color:#D4D4D4;">tcprewrite --fixcsum --infile=mysql.pcap --outfile=mysql.pcap</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),o={href:"https://www.i4k.xyz/article/u012206617/86558728",target:"_blank",rel:"noopener noreferrer"};function u(h,v){const a=n("ExternalLinkIcon");return p(),i("div",null,[d,e("p",null,[e("a",o,[c("Tcpreplay 重放数据"),l(a)])])])}const b=s(r,[["render",u],["__file","tcp.html.vue"]]);export{b as default};
